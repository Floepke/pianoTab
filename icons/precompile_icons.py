#!/usr/bin/env python3
"""
Precompile script to convert PNG icons to base64 strings.
Run this script to generate icons_data.py with all icons as base64.

Usage:
    python precompile_icons.py
"""

import os
import base64
from pathlib import Path


def png_to_base64(png_path):
    """Convert PNG file to base64 string."""
    with open(png_path, 'rb') as f:
        return base64.b64encode(f.read()).decode('utf-8')


def generate_icons_data():
    """Generate icons_data.py with all PNG icons as base64."""
    
    # Find all PNG files in icons directory (same directory as this script)
    icons_dir = Path(__file__).parent
    png_files = list(icons_dir.glob('*.png'))
    
    if not png_files:
        print(f"Warning: No PNG files found in {icons_dir}")
        return
    
    # Start building the Python file
    output = ['"""', 'Auto-generated icon data.', 
              'Generated by precompile_icons.py', 
              'DO NOT EDIT MANUALLY!', '"""', '', 
              'ICONS = {']
    
    # Convert each PNG to base64
    for png_file in sorted(png_files):
        icon_name = png_file.stem  # filename without extension
        print(f"Processing: {png_file.name}")
        
        try:
            base64_data = png_to_base64(png_file)
            output.append(f"    '{icon_name}': (")
            output.append(f"        '{base64_data}'")
            output.append("    ),")
        except Exception as e:
            print(f"Error processing {png_file.name}: {e}")
    
    output.append('}')
    output.append('')
    
    # Write to icons_data.py in the same directory
    output_file = Path(__file__).parent / 'icons_data.py'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(output))
    
    print(f"\nâœ… Generated {output_file}")
    print(f"   {len(png_files)} icons converted to base64")


if __name__ == '__main__':
    generate_icons_data()
