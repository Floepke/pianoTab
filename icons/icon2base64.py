#!/usr/bin/env python3
'''
Icon to Base64 Converter Script

This script scans the icons folder for PNG files and converts them to base64 strings.
It generates an icons_data.py file with all icons as base64 encoded strings.

Usage:
    python3 icons/icon2base64.py

The script will:
1. Find all .png files in the icons folder
2. Convert them to base64 strings
3. Generate icons_data.py with the encoded data
4. Create helper functions to load icons
'''

import os
import base64
from pathlib import Path

def convert_png_to_base64(png_path):
    '''Convert a PNG file to base64 string.'''
    try:
        with open(png_path, 'rb') as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
            return encoded_string
    except Exception as e:
        print(f'Error converting {png_path}: {e}')
        return None

def sanitize_name(filename):
    '''Convert filename to valid Python variable name.'''
    # Remove extension
    name = Path(filename).stem
    # Replace invalid characters with underscores
    sanitized = ''
    for char in name:
        if char.isalnum():
            sanitized += char
        else:
            sanitized += '_'
    # Ensure it doesn't start with a number
    if sanitized and sanitized[0].isdigit():
        sanitized = 'icon_' + sanitized
    return sanitized.upper()

def generate_icons_data():
    '''Generate icons_data.py file with all PNG icons as base64 strings.'''
    icons_dir = Path(__file__).parent
    png_files = list(icons_dir.glob('*.png'))
    
    if not png_files:
        print('No PNG files found in icons folder.')
        print('Place your .png icon files in the icons folder and run this script again.')
        return
    
    # Start building the Python file content
    file_content = []
    file_content.append('#!/usr/bin/env python3')
    file_content.append('\'\'\'')
    file_content.append('Generated icon data file.')
    file_content.append('')
    file_content.append('This file is automatically generated by icon2base64.py')
    file_content.append('Do not edit manually - your changes will be overwritten!')
    file_content.append('')
    file_content.append('To regenerate: python3 icons/icon2base64.py')
    file_content.append('\'\'\'')
    file_content.append('')
    file_content.append('import base64')
    file_content.append('import io')
    file_content.append('from PIL import Image')
    file_content.append('')
    file_content.append('# Base64 encoded icon data')
    file_content.append('')
    
    # Convert each PNG file
    icon_names = []
    for png_file in png_files:
        print(f'Converting {png_file.name}...')
        base64_data = convert_png_to_base64(png_file)
        
        if base64_data:
            var_name = sanitize_name(png_file.name)
            icon_names.append((var_name, png_file.name))
            
            file_content.append(f'# Icon: {png_file.name}')
            file_content.append(f'{var_name} = \'\'\'\\')
            
            # Split base64 string into lines for readability
            line_length = 80
            for i in range(0, len(base64_data), line_length):
                chunk = base64_data[i:i+line_length]
                file_content.append(chunk + '\\')
            
            file_content.append('\'\'\'')
            file_content.append('')
    
    # Add icon dictionary for easy access
    file_content.append('# Icon dictionary for easy access')
    file_content.append('ICONS = {')
    for var_name, filename in icon_names:
        clean_name = Path(filename).stem.lower()
        file_content.append(f'    \'{clean_name}\': {var_name},')
    file_content.append('}')
    file_content.append('')
    
    # Add helper functions
    file_content.extend([
        'def load_icon(icon_name_or_base64, size=(24, 24)):',
        '    \'\'\'',
        '    Load an icon from base64 string.',
        '    ',
        '    Args:',
        '        icon_name_or_base64: Either icon name (string) or base64 data',
        '        size: Tuple (width, height) for icon size',
        '    ',
        '    Returns:',
        '        PIL Image object',
        '    \'\'\'',
        '    try:',
        '        # Check if it\'s an icon name first',
        '        if isinstance(icon_name_or_base64, str) and icon_name_or_base64 in ICONS:',
        '            base64_data = ICONS[icon_name_or_base64]',
        '        else:',
        '            base64_data = icon_name_or_base64',
        '            ',
        '        # Decode base64 to bytes',
        '        image_data = base64.b64decode(base64_data)',
        '        ',
        '        # Create PIL Image from bytes',
        '        image = Image.open(io.BytesIO(image_data))',
        '        ',
        '        # Resize if needed',
        '        if image.size != size:',
        '            image = image.resize(size, Image.Resampling.LANCZOS)',
        '            ',
        '        return image',
        '        ',
        '    except Exception as e:',
        '        print(f\'Error loading icon: {e}\')',
        '        # Return a simple placeholder image',
        '        placeholder = Image.new(\'RGBA\', size, (128, 128, 128, 255))',
        '        return placeholder',
        '',
        'def get_available_icons():',
        '    \'\'\'Get list of available icon names.\'\'\'',
        '    return list(ICONS.keys())',
        '',
        'def icon_exists(icon_name):',
        '    \'\'\'Check if an icon exists.\'\'\'',
        '    return icon_name in ICONS',
        ''
    ])
    
    # Write the file
    output_path = icons_dir / 'icons_data.py'
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(file_content) + '\n')

        print(f'\n✅ Successfully generated {output_path}')
        print(f'📊 Converted {len(icon_names)} icons:')
        for var_name, filename in icon_names:
            print(f'   - {filename} → {var_name}')

        print(f'\n🎯 Usage in your code:')
        print(f'   from icons.icons_data import load_icon')
        for var_name, filename in icon_names[:3]:  # Show first 3 examples
            clean_name = Path(filename).stem.lower()
            print(f'   icon_image = load_icon(\'{clean_name}\')  # Load {filename}')
        if len(icon_names) > 3:
            print(f'   # ... and {len(icon_names) - 3} more icons')

    except Exception as e:
        print(f'❌ Error writing icons_data.py: {e}')

if __name__ == '__main__':
    print('🔄 Converting PNG icons to base64...')
    print(f'📁 Scanning: {Path(__file__).parent}')
    generate_icons_data()