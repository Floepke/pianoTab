{
    "metaInfo": {
        "appName": "PianoTab",
        "extension": ".piano",
        "description": "PianoTab score file",
        "version": "1.0",
        "created": "30-10-2025_05:07:53",
        "author": "PianoTab Team",
        "license": "MIT"
    },
    "header": {
        "title": "Untitled",
        "subtitle": "",
        "composer": "",
        "arranger": "",
        "lyricist": "",
        "publisher": "",
        "copyright": "Copyright \u00a9 2025, PianoTab. All rights reserved.",
        "timeStamp": "30-10-2025_05:07:53",
        "genre": "",
        "comment": ""
    },
    "properties": {
        "globalNote": {
            "color": "#000000",
            "colorLeftMidiNote": "#000000",
            "colorRightMidiNote": "#000000",
            "stemWidth": 1.0,
            "stemLength": 10.0,
            "beamWidth": 1.0,
            "blackNoteDirection": "v",
            "noteHeadVisible?": 1,
            "stemVisible?": 1,
            "midiNoteVisible?": 1,
            "accidentalVisible?": 1,
            "noteStopVisible?": 1,
            "continuationDotVisible?": 1,
            "leftDotVisible?": 1
        },
        "globalArticulation": {
            "color": "#000000",
            "visible?": 1
        },
        "globalBeam": {
            "color": "#000000",
            "width": 4.0,
            "slant": 5.0,
            "visible?": 1
        },
        "globalGraceNote": {
            "color": "#000000",
            "visible?": 1
        },
        "globalCountLine": {
            "color": "#000000",
            "width": 1.0,
            "dashPattern": [],
            "visible?": 1
        },
        "globalSlur": {
            "color": "#000000",
            "middleWidth": 1.0,
            "startEndWidth": 0.5,
            "visible?": 1
        },
        "globalText": {
            "fontSize": 12,
            "family": "Courier New",
            "color": "#000000"
        },
        "globalBarLine": {
            "color": "#000000",
            "width": 1.0,
            "visible?": 1
        },
        "globalBasegrid": {
            "gridlineColor": "#000000",
            "gridlineWidth": 1.0,
            "gridlineDashPattern": [
                4,
                4
            ],
            "barlineColor": "#000000",
            "barlineWidth": 2.0,
            "fontSize": 12
        },
        "globalStave": {
            "twoLineColor": "#000000",
            "threeLineColor": "#000000",
            "clefColor": "#000000",
            "twoLineWidth": 1.0,
            "threeLineWidth": 2.0,
            "clefWidth": 1.0,
            "visible?": 1,
            "clefDashPattern": [
                4,
                4
            ]
        },
        "globalPage": {
            "width": 210.0,
            "height": 297.0,
            "marginLeft": 5.0,
            "marginRight": 5.0,
            "marginUp": 10.0,
            "marginDown": 10.0,
            "headerHeight": 12.5,
            "footerHeight": 12.5
        },
        "globalSection": {
            "color": "#000000",
            "lineWidth": 1.0,
            "visible?": 1
        },
        "globalStartRepeat": {
            "color": "#000000",
            "lineWidth": 1.0,
            "visible?": 1
        },
        "globalEndrepeat": {
            "color": "#000000",
            "lineWidth": 1.0,
            "visible?": 1
        },
        "editorZoomPixelsQuarter": 100,
        "stopSignType": "PianoTab",
        "drawScale": 0.75
    },
    "baseGrid": [
        {
            "numerator": 4,
            "denominator": 4,
            "gridTimes": [
                256.0,
                512.0,
                768.0
            ],
            "measureAmount": 8,
            "timeSignatureIndicatorVisible?": 1
        }
    ],
    "lineBreak": [
        {
            "id": 0,
            "time": 0.0,
            "type": "locked",
            "staveRange": []
        }
    ],
    "stave": [
        {
            "name": "Stave 1",
            "scale": 1.0,
            "event": {
                "note": [
                    {
                        "id": 1,
                        "time": 0.0,
                        "duration": 256.0,
                        "pitch": 60,
                        "velocity": 80,
                        "art": [],
                        "hand": ">",
                        "color": null,
                        "colorMidiLeftNote": null,
                        "colorMidiRightNote": null,
                        "blackNoteDirection": null
                    },
                    {
                        "id": 2,
                        "time": 0.0,
                        "duration": 256.0,
                        "pitch": 62,
                        "velocity": 80,
                        "art": [],
                        "hand": ">",
                        "color": null,
                        "colorMidiLeftNote": null,
                        "colorMidiRightNote": null,
                        "blackNoteDirection": null
                    },
                    {
                        "id": 3,
                        "time": 0.0,
                        "duration": 256.0,
                        "pitch": 40,
                        "velocity": 80,
                        "art": [],
                        "hand": ">",
                        "color": null,
                        "colorMidiLeftNote": null,
                        "colorMidiRightNote": null,
                        "blackNoteDirection": null
                    }
                ],
                "graceNote": [],
                "countLine": [],
                "startRepeat": [],
                "endRepeat": [],
                "section": [],
                "beam": [],
                "text": [],
                "slur": [],
                "tempo": []
            }
        }
    ],
    "quarterNoteLength": 256.0
}
Now we have the basic drawing functionality for the canvasses Editor and Printview in my app. great! For the print view I need top develop a comprehensive native pdf export. in the past i did this too with the tkinter Canvas icw pymupdf. I think we need to embed the Canvas with basic drawing functionality in a seperate file for maintainability and if we run one of the add_* methods we run the original method from canvas.py after that we draw the same line/polygon but on the pymupdf pdf canvas. it needs to gather the draw commands to draw vector pdf. give it a shot and then we will finetune and test every method.