"""
Type stub file for SCORE class.
AUTO-GENERATED - DO NOT EDIT MANUALLY!
Generated by file/event_factory.py on module import.
"""

from typing import List, Literal, Optional
from file.note import Note
from file.graceNote import GraceNote
from file.beam import Beam
from file.text import Text
from file.slur import Slur
from file.countLine import CountLine
from file.section import Section
from file.startRepeat import StartRepeat
from file.endRepeat import EndRepeat
from file.tempo import Tempo
from file.articulation import Articulation
from file.metaInfo import MetaInfo
from file.header import Header
from file.properties import Properties
from file.baseGrid import BaseGrid
from file.lineBreak import LineBreak

class SCORE:
    """Type hints for auto-generated event factory methods."""

    def new_note(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        duration: float = 256.0,
        pitch: int = 40,
        velocity: int = 80,
        articulation: List[Articulation] = [],
        hand: Literal['<', '>'] = '>',
        color: Optional[str] = None,
        colorMidiLeftNote: Optional[str] = None,
        colorMidiRightNote: Optional[str] = None,
        blackNoteDirection: Optional[Literal['^', 'v']] = None,
    ) -> Note: ...

    def new_grace_note(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        pitch: int = 60,
        velocity: int = 80,
        color: Optional[str] = None,
    ) -> GraceNote: ...

    def new_beam(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        staff: float = 0.0,
        hand: Literal['<', '>'] = '<',
        color: Optional[str] = None,
        width: Optional[float] = None,
        slant: Optional[float] = None,
    ) -> Beam: ...

    def new_text(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        side: Literal['<', '>'] = '>',
        distFromSide: float = 10.0,
        text: str = 'Text',
        fontSize: Optional[int] = None,
        color: Optional[str] = None,
    ) -> Text: ...

    def new_slur(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        x1_semitonesFromC4: int = 0,
        x2_semitonesFromC4: int = 0,
        y2_time: float = 0.0,
        x3_semitonesFromC4: int = 0,
        y3_time: float = 0.0,
        x4_semitonesFromC4: int = 0,
        y4_time: float = 0.0,
        color: Optional[str] = None,
        startEndWidth: Optional[float] = None,
        middleWidth: Optional[float] = None,
    ) -> Slur: ...

    def new_count_line(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        pitch1: int = 40,
        pitch2: int = 44,
        color: Optional[str] = None,
        dashPattern: Optional[List[float]] = None,
    ) -> CountLine: ...

    def new_section(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        text: str = 'Section',
        color: Optional[str] = None,
        lineWidth: Optional[float] = None,
    ) -> Section: ...

    def new_start_repeat(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        color: Optional[str] = None,
        lineWidth: Optional[float] = None,
    ) -> StartRepeat: ...

    def new_end_repeat(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        color: Optional[str] = None,
        lineWidth: Optional[float] = None,
    ) -> EndRepeat: ...

    def new_tempo(
        self,
        stave_idx: int = 0,
        time: float = 0.0,
        bpm: int = 120,
    ) -> Tempo: ...
